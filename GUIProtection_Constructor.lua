local GuiProtector, metatable;

metatable = setmetatable

local other = {}
local metatable = setmetatable

local other_setup = {__tostring = function() return "[ Protection Constructor ]" end}
local guiprotection_setup = {__tostring = function() return "[ Protection Constructor ]" end}
other = metatable({
	__pairs = function(tbl)
		return next, tbl, nil
	end,
	__descendantof = function(child: Instance, of: Instance)
		return child:IsDescendantOf(of)
	end,
	__isa = function(child: Instance, of: string)
		return child:IsA(of)
	end,
}, other_setup)

local children = {}
local type = getrawmetatable == nil
if type == true then
	local meta = getrawmetatable(game);
	(setreadonly or set_readonly or set_read_only)(meta, false)
	local index_backup = meta.__index
	local newindex_backup = meta.__newindex
	local namecall_backup = meta.__namecall
	meta.__index = function(self, property, value)
		if table.find(self, children) and not checkcaller() then
			return index_backup(nil, nil, function()
				return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100}, {__tostring = function() return "nah go find something else" end})
			end)
		end
		for i, v in pairs(children) do
			if other.__descendantof(self,v) and not checkcaller() then
				return index_backup(nil, nil, function()
					return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100}, {__tostring = function() return "nah go find something else" end})
				end)
			end
		end
		return index_backup(self, property, value)
	end
	meta.__newindex = function(self, property, value)
		if table.find(self, children) and not checkcaller() then
			return newindex_backup(nil, nil, function()
				return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100}, {__tostring = function() return "nah go find something else" end})
			end)
		end
		for i, v in pairs(children) do
			if other.__descendantof(self,v) and not checkcaller() then
				return newindex_backup(nil, nil, function()
					return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100}, {__tostring = function() return "nah go find something else" end})
				end)
			end
		end
		return newindex_backup(self, property, value)
	end	
	meta.__namecall = function(self, property, value)
		if table.find(self, children) and not checkcaller() then
			return namecall_backup(nil, nil, function()
				return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100, ClassName = "Humanoid"}, {__tostring = function() return "Instance" end})
			end)
		end
		for i, v in pairs(children) do
			if other.__descendantof(self,v) and not checkcaller() then
				return namecall_backup(nil, nil, function()
					return setmetatable({WalkSpeed = 16, JumpPower = 50, Health = 100, MaxHealth = 100, ClassName = "Humanoid"}, {__tostring = function() return "Instance" end})
				end)
			end
		end
		return namecall_backup(self, property, value)
	end	
else
	error("[GuiProtector Constructor]: The feature \"getrawmetatable\" is not supported for "..(identifyexploit or identifycheat or identify_exploit or identify_cheat or function() return "UNKNOWN" end)()..".")
end

GuiProtector = metatable({
	new = function(Child: ScreenGui)
		local tbl = {}
		function tbl.stop_protecting()
			table.remove(children, table.find(children, Child))
		end
		function tbl.protect_again()
			if table.find(children, Child) then return warn("Unfortunately, this instance was already protected and function \"protect_again\" can't be run unless the function \"stop_protecting\" is ran.") end
			table.insert(children, Child)
		end
		function tbl.is_protected()
			return table.find(children, Child) ~= nil
		end
		table.insert(children, Child)
		return tbl
	end,
}, guiprotection_setup)

return GuiProtector
